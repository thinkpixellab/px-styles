////
/// @group utils.layout
/// @todo Needs documentation
////

@use 'sass:math';
@use 'units.scss' as units;

/// Creates css to force an element to maintain a particular aspect (based on width) using the
/// padding bottom trick. Note: padding bottom is calculated relative to the parent width, so it's
/// common to use this on a pseudo element and set the width on the element itself. Check out
/// aspect-before / aspect-after.
///
/// @param {string or number} $aspect A number (like 1.333) or string (like '16:9') that represents the aspect
/// ratio
///
/// @param {string} $display [block] The value of the display property to be set on the element
///
/// @example @include aspect('16:9') // produces the correct css for an aspect ratio of 16:9// =>
/// display: block;
/// width: 100%;
/// padding-bottom: 56.25%;
///
/// @example @include aspect(divide(4,3))  // produces the correct css for an aspect ratio of 4:3

@mixin aspect($aspect, $display: block) {
    $aspect: units.aspect-to-number($aspect);
    display: $display;
    width: 100%;
    padding-bottom: 100% * math.div(1, $aspect);
}
///
/// @example @include aspect-before(1.333, $display: block) // =>
/// display: block;
/// width: 100%;
/// padding-bottom: 75.0187546887%;
@mixin aspect-before($aspect, $display: block) {
    &:before {
        content: '';
        @include aspect($aspect, $display);
    }
}
///
/// @example @include aspect-after(1.333, $display: block) // =>
/// display: block;
/// width: 100%;
/// padding-bottom: 75.0187546887%;
@mixin aspect-after($aspect, $display: block) {
    &:after {
        content: '';
        @include aspect($aspect, $display);
    }
}

/// Convenience mixin to inherit the border-radius of a parent based on child position (first child
/// inherits top left/right radius, last child inherits bottom left/right radius)
///
/// @example @include first-last-radius()

@mixin first-last-radius {
    &:first-child {
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
    }
    &:last-child {
        border-bottom-left-radius: inherit;
        border-bottom-right-radius: inherit;
    }
    &:first-child:last-child {
        border-radius: inherit;
    }
}

// internal helper for abs, fixed, rel

@mixin -pos($pos: null, $t: null, $r: null, $b: null, $l: null) {
    position: $pos;

    // no offsets
    @if ($t == null and $r == null and $b == null and $l == null) {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }

    // one offset
    @else if ($t != null and $r == null and $b == null and $l == null) {
        top: $t;
        right: $t;
        bottom: $t;
        left: $t;
    }

    // two offsets
    @else if ($t != null and $r != null and $b == null and $l == null) {
        top: $t;
        right: $r;
        bottom: $t;
        left: $r;
    }

    // other
    @else {
        top: $t;
        right: $r;
        bottom: $b;
        left: $l;
    }
}

/// @example @include rel($t: null, $r: null, $b: null, $l: null) // =>
/// position: relative;
/// top: 0;
/// right: 0;
/// bottom: 0;
/// left: 0;
@mixin rel($t: null, $r: null, $b: null, $l: null) {
    @include -pos(relative, $t, $r, $b, $l);
}

/// @example @include abs($t: null, $r: null, $b: null, $l: null) // =>
/// position: absolute;
/// top: 0;
/// right: 0;
/// bottom: 0;
/// left: 0;
@mixin abs($t: null, $r: null, $b: null, $l: null) {
    @include -pos(absolute, $t, $r, $b, $l);
}

/// @example @include fixed($t: null, $r: null, $b: null, $l: null) // =>
/// position: fixed;
/// top: 0;
/// right: 0;
/// bottom: 0;
/// left: 0;
@mixin fixed($t: null, $r: null, $b: null, $l: null) {
    @include -pos(fixed, $t, $r, $b, $l);
}

/// @example @include left-top($l: 0, $t: 0) // =>
/// position: absolute;
/// left: 0;
/// top: 0;
@mixin left-top($l: 0, $t: 0) {
    position: absolute;
    left: $l;
    top: $t;
}
/// @example @include right-top($r: 0, $t: 0) // =>
/// position: absolute;
/// right: 0;
/// top: 0;
@mixin right-top($r: 0, $t: 0) {
    position: absolute;
    right: $r;
    top: $t;
}
/// @example @include left-bottom($l: 0, $b: 0) // =>
/// position: absolute;
/// left: 0;
/// bottom: 0;
@mixin left-bottom($l: 0, $b: 0) {
    position: absolute;
    left: $l;
    bottom: $b;
}
/// @example @include right-bottom($r: 0, $b: 0) // =>
/// position: absolute;
/// left: 0;
/// bottom: 0;
@mixin right-bottom($r: 0, $b: 0) {
    position: absolute;
    right: $r;
    bottom: $b;
}
/// @example @include abs-fill() // =>
/// position: absolute;
/// top: 0;
/// left: 0;
/// width: 100%;
/// height: 100%;
@mixin abs-fill() {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
/// @example @include center($left: 50%, $top: 50%, $position: absolute)
/// position: absolute;
/// left: 50%;
/// top: 50%;
/// transform: translate(-50%, -50%);
@mixin center($left: 50%, $top: 50%, $position: absolute) {
    position: $position;
    left: $left;
    top: $top;
    transform: translate(-$left, -$top);
}
/// @example @include center-x($left: 50%, $position: absolute) // =>
/// position: absolute;
/// left: 50%;
/// transform: translateX(-50%);
@mixin center-x($left: 50%, $position: absolute) {
    position: $position;
    left: $left;
    transform: translateX(-$left);
}
/// @example @include center-y($top: 50%, $position: absolute) // =>
/// position: absolute;
/// top: 50%;
/// transform: translateY(-50%);
@mixin center-y($top: 50%, $position: absolute) {
    position: $position;
    top: $top;
    transform: translateY(-$top);
}
