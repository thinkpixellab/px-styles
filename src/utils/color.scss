@use "sass:color";
@use "sass:list";
////
/// @group utils.color
////

@use 'math.scss' as *;
@use 'units.scss' as *;

///
/// Produce a shade (a lighter or darker version) of a color based on the value of $shade and an
/// optional darkest to lightest shade range.
///
/// @param {color} $color [null] The color to be shaded. If not provided, it will be calculated as
/// the middle value within $shade-range.
///
/// @param {number} $shade [0]The shading to be applied, as a percentage from -100% to 100% (for
/// legacy reasons we also take a value between -10, 10 and convert to a percentage).
///
/// @param {(color, color)} $shade-range [null] The range of colors will be produced as a list
/// (darkest, lightest).
///
/// @example $color: shade(red, 5, null) // => #ff8080
///

@function color-shade(
    $color: null,
    $shade: 0,
    $shade-range: (
        black,
        white,
    )
) {
    $shade: if(is-percentage($shade), $shade, $shade * 10%);

    $shade: clamp-number($shade, -100%, 100%);

    @if ($color == null) {
        $color: color.mix(list.nth($shade-range, 1), list.nth($shade-range, 2));
    }

    @if ($shade < 0) {
        $color1: list.nth($shade-range, 1);
        @return color.mix($color1, $color, $shade * -1);
    }

    @if ($shade > 0) {
        @return color.mix(list.nth($shade-range, 2), $color, $shade);
    }

    @return $color;
}

/// Choose a contrasting foreground based on the contrast between a background and two foreground
/// options (a light and dark).
///
/// @example contrast-color(rgb(233, 229, 31), rgb(199, 192, 192), rgb(133, 133, 231)) // => #8585e7

@function color-contrast($bg, $light-fg: white, $dark-fg: black, $contrast-threshold: 128) {
    @if (not(is-color($bg))) {
        $bg: clr($bg);
    }
    @return if(yiq($bg) < $contrast-threshold, $light-fg, $dark-fg);
}

/// Computes the the luminance (grayscale value) of a color in the yiq color space. This can be used
/// for determining the relative contrast between two colors.
///
/// @example yiq(purple) // => 52.864

@function yiq($color) {
    $r: color.red($color);
    $g: color.green($color);
    $b: color.blue($color);
    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) * 0.001;

    // 0 (black) - 255 (white)
    @return $yiq;
}

/// Calculates luminance of a color based on the WCAG2 standard Luminance calculation based on:
/// https://www.w3.org/TR/WCAG20/#relativeluminancedef
///
@function luminance($color) {
    $R: divide(color.red($color), 255);
    $G: divide(color.green($color), 255);
    $B: divide(color.blue($color), 255);

    $c: divide(0.055, 1.055);

    @if $R <= 0.03928 {
        $R: divide($R, 12.92);
    } @else {
        $R: nth-root(pow($R + $c, 24), 10);
    }

    @if $G <= 0.03928 {
        $G: divide($G, 12.92);
    } @else {
        $G: nth-root(pow($G + $c, 24), 10);
    }

    @if $B <= 0.03928 {
        $B: divide($B, 12.92);
    } @else {
        $B: nth-root(pow($B + $c, 24), 10);
    }

    @return $R * 0.2126 + $G * 0.7152 + $B * 0.0722;
}

// Calculates the contrast of two colors based on the WCAG2 standard Constrast calculation based on:
// https://www.w3.org/TR/WCAG20/#contrast-ratiodef

@function color-contrast($color1, $color2) {
    @if luminance($color1) > luminance($color2) {
        @return divide((luminance($color1) + 0.05), (luminance($color2) + 0.05));
    } @else {
        @return divide((luminance($color2) + 0.05), (luminance($color1) + 0.05));
    }
}
