////
/// @group modules.controls
////

@use '../utils' as *;
@use '../site' as *;

// Implementation notes:
//
// Some general control style implementation notes:
//
// - For most controls, we use css-map to generate the style. This means that we are, for the most
//   part, keeping the css in a map until we finalize it and then we use css-map($css) to actually
//   generate the style. This prevents duplicate properties and lets us keep the css fluid as we
//   merge in defaults and overrides, etc.
//
// - We're not using @extend much, primarily because the expectation is that in many cases these
//   control styles are generated from within component files with relatively narrow scope, where
//   @extend won't provide much advantage.
//
// - Generally moving away from css only themed controls and relying on components that allow us to
//   also inlcude specific markup and code. Because of that, I'm not include styles for things like
//   checkbox, radio, etc. since those all relied on specific markup and very opinionated css.

// ----------------------------------------------------------------------------
// helpers
// ----------------------------------------------------------------------------

/// Generates one of a number of "canned" / common focus styles as a css map (which can be combined
/// with the css-map function to generate the correct focus visual css)
///
///
/// @param {shadow | outline} $style A named style.
/// @param {color} $color [null]
///
/// @example control-focus-style('outline', red) // => (outline-offset: 0px, outline: 1px dashed red)

@function control-focus-style($style, $color: null) {
    @if ($style == 'shadow') {
        $color: if-null($color, get('focus:shadow-color'));
        $width: get('focus:shadow-width');
        @return (box-shadow: 0 0 0 $width $color);
    }
    @if ($style == 'outline') {
        $color: if-null($color, get('focus:outline-color'));
        @return (outline-offset: 0px, outline: 1px dashed $color);
    }
}

/// Extract an accent color from any of the properties in $accent-props, with a fallback value of
/// 'controls:accent' (note: last property in list wins)

@function get-control-accent($overrides, $accent-props...) {
    $accent: get('controls:accent');
    @each $prop in $accent-props {
        $accent: map-get-default($overrides, $prop, $accent);
    }
    @return $accent;
}

/// Mixin to help create toggle components (checkbox, radiobutton, toggle, togglebutton, etc.) using
/// the common input+label structure. The basic idea behind this pattern is to use an <input> and a
/// <label> component together as follows:
///
/// ```html
/// <div class="my-checkbox">
///     <input type="checkbox" id="cb" />
///     <label for="cb">Toggle Me</label>
/// </div>
/// ```
///
/// The label and input are bound together by the for property on the label (which refers to the
/// input by id), making the label a proxy for the input. The label can be styled much more readily
/// than the input, so the common practice is to hide the input and style the label but the css
/// rules that allow us to manage states in this situation can be difficult to remember and can be a
/// little complex. This mixin helps to generate those rules.
///
/// @param {string} $state [null] The name of the state (e.g. hover, checked, indeterminate, etc.) under
/// which the css in the @content area should apply. The mixin will generate the appropriate rule
/// for that state.
///
/// @example
/// .my-checkbox {
///
///     // do the basic setup (hide inputs, etc.)
///     @include toggle-helper(base);
///
///     @include toggle-helper {
///         // default state
///     }
///     @include toggle-helper(checked) {
///         // checked state
///     }
///     @include toggle-helper(hover) {
///         // hover state
///     }
/// }

@mixin toggle-helper($state: null) {
    @if ($state == null) {
        > label {
            @content;
        }
    } @else if ($state == base) {
        > input {
            position: absolute;
            appearance: none;
            opacity: 0;
            width: 0;
            height: 0;
            transform: scale(0);
        }
    } @else if ($state == checked or $state == indeterminate or $state == disabled) {
        > input:#{$state} + label {
            @content;
        }
    } @else if ($state == focus) {
        > input:focus-visible + label {
            @content;
        }
    } @else {
        &:#{$state} > input + label {
            @content;
        }
    }
}

@mixin -focus-style($style, $color: null) {
    @include css-map(-focus-style($style, $color));
}

@mixin -focus($style, $color: null) {
    @include focus() {
        @include -focus-style($style, $color);
    }
}

// ----------------------------------------------------------------------------
// base
// ----------------------------------------------------------------------------

@function -control-base() {
    @return (
        appearance: none,
        box-sizing: border-box,
        position: relative,
        outline: none,
        border: none,
        white-space: nowrap,
        font-family: get('controls:font-family'),
        font-size: get('controls:font-size'),
        font-weight: get('controls:font-weight')
    );
}

/// Completely resets the appearance of controls with some opinionated defaults (see source or
/// output for details).
///
/// @example control-reset() // => outputs an in

@mixin control-reset() {
    @include css-map(-control-base());
}

// ----------------------------------------------------------------------------
// button (base)
// ----------------------------------------------------------------------------

@function -button-base-map() {
    @return (
        display: inline-flex,
        align-items: center,
        justify-content: center,
        text-overflow: ellipsis,
        user-select: none,
        padding: 0 1em,
        border-radius: get('controls:border-radius'),
        min-width: get('controls:min-width'),
        min-height: get('controls:min-height'),
        cursor: pointer,
        disabled: (
            cursor: not-allowed,
        )
    );
}

// ----------------------------------------------------------------------------
// button (default / normal button)
// ----------------------------------------------------------------------------

/// Generates a button style based on the site's button settings. The default button is pretty
/// opinionated. All sizing is in ems (so setting the font size will scale the button). See the
/// source for more details.
///
/// Defaults can be configured with the key 'controls:button'.
///
/// @param {map} $overrides [()] A map containing css key / value pairs. Just about any css is valid
/// (currently transitions can't be overriden) including supported state specific values (see
/// defaults in css-map). If background or background-color is set, it will be adapted for other
/// states unless also override for those states
///
/// @example
///     @include button() => creates a standard, default button
///
/// @example
///     @include button((font-size: 12px)) => creates a smaller button with a font-size of 12px

@mixin button($overrides: ()) {
    @include css-map(button($overrides));
}

@function button($overrides) {
    // extract an accent color
    $accent: get-control-accent($overrides, background, background-color);

    // get button defaults from global config
    $config: get('controls:button', null, false);

    // standard button styleing
    $button: (
        background-color: $accent,
        box-shadow: shadow(2, 0.5),
        color: contrast-color($accent),
        transition: transition(background color box-shadow, get('controls:transition', 'fast')),
        hover: (
            background-color: shade($accent, 1),
            box-shadow: shadow(4, 1),
        ),
        active: (
            background-color: shade($accent, -2),
            box-shadow: shadow(0),
        ),
        disabled: (
            background-color: rgba(gray(2), 0.5),
            color: gray(-2),
            box-shadow: none,
        ),
        focus: control-focus-style('shadow', rgba($accent, 0.33)),
    );

    // merge and return all the css
    @return flat-merge(-control-base(), -button-base-map(), $button, $config, $overrides);
}

// ----------------------------------------------------------------------------
// button-outline
// ----------------------------------------------------------------------------

/// Generates a (somewhat opinionated) outlined button style based on the site's control / button
/// settings. Behaves a lot like the `button` mixin so see that for more detail. Global config with
/// 'controls:button' and 'controls:button-outline'.
///
/// @param {map} $overrides [()] A map containing css key/value pairs. Just about any css is valid
/// (currently transitions can't be overriden) including supported state specific values: hover,
/// active, disabled. The outline color is derived from the border color. The properties
/// border-color and color can be specified as shades (numbers relative to the border-color or
/// primary accent color).
///
///
/// @example
///     @include button-outline(); // => creates a standard outline button
///
/// @example
///     @include button-outline({border-color: blue}); // => creates a blue outline button

@mixin button-outline($overrides: ()) {
    @include css-map(button-outline($overrides));
}

@function button-outline($overrides) {
    // extract an accent color
    $accent: get-control-accent($overrides, background, background-color);

    // get button / button-outline defaults from global config
    $config: flat-merge(
        get('controls:button', (), false),
        get('controls:button-outline', (), false)
    );

    // standard button styleing
    $button: (
        color: $accent,
        border-color: currentColor,
        border-width: 2px,
        border-style: solid,
        background: rgba($accent, 0),
        hover: (
            color: shade($accent, 2),
            background: rgba(shade($accent, 2), 0.05),
            border-color: shade($accent, 2),
        ),
        active: (
            color: shade($accent, -1),
            background: rgba(shade($accent, -1), 0.1),
            border-color: shade($accent, -1),
        ),
        disabled: (
            background: gray(5),
            color: gray(-2),
            box-shadow: none,
        ),
        transition:
            transition(background color border box-shadow, get('controls:transition', 'fast')),
        focus: control-focus-style('shadow', rgba($accent, 0.33)),
    );

    // merge and return all the css
    @return flat-merge(-control-base(), -button-base-map(), $button, $config, $overrides);
}

// ----------------------------------------------------------------------------
// button-icon
// ----------------------------------------------------------------------------

/// Generates a simple button with very little styling that can be used to wrap an icon or text with
///  basic transitions for hover and active.
///
/// @param {map} $overrides [()]  A map containing css key/value pairs.
///
/// @todo Robby how do we test the example below? the curly braces throw an error in scratch.
/// @example
///     @include button-icon() => creates a button that can wrap an icon

@mixin button-icon($overrides: ()) {
    @include css-map(button-icon($overrides));
}

@function button-icon($overrides: ()) {
    // button css
    $button: (
        min-width: 0,
        background-color: transparent,
        padding: 0.5em,
        transition: transition(transform, fast),
        'hover:transform': translateY(-1px),
        'active:transform': translateY(1px),
        'disabled': (
            opacity: 0.5,
        ),
    );

    // merge all the css
    $css: flat-merge(-control-base(), -button-base-map(), $button, $overrides);

    @return $css;
}

// ----------------------------------------------------------------------------
// dropdowns
// ----------------------------------------------------------------------------

/// Generates a button style that is equivalent to the button() mixin with an arrow to indiciate
/// that the button is intended to be used a dropdown. It is expected that this style would be
/// applied to a select element and because of that this will also generate styles that reset the
/// appearance of > option elements.
///
/// @param {map} $overrides [()] See the button mixin for details.
///
/// @param {map} $items-overrides [()] Overrides for the child options (> option)
///
/// @param {map} $arrow-svg [()] An svg string that will be used for the icon (note that
/// width/height must be specified instead of viewbox)
///
/// @example
///     // markup
///     <select class="button-dropdown"> <option>...</option> </select>
///
///     // scss
///     .dropdown { @include button-dropdown(); }

@mixin button-dropdown($overrides: (), $items-overrides: (), $arrow-svg: null) {
    // output the css
    @include css-map(dropdown-button($overrides, $arrow-svg));

    // restore the default background on child options
    $items: (
        background-color: clr(page-bg),
        color: clr(page-fg),
    );
    > option {
        @include css-map(flat-merge($items, $items-overrides));
    }
}

@function dropdown-button($overrides, $arrow-svg) {
    // get the default arrow svg if not provided
    $arrow-svg: if-null-get($arrow-svg, 'svg:dropdown', true);

    // get button-dropdown defaults from global config
    $config: get('controls:button-dropdown', (), false);

    // get the button css as a base
    $button: button(flat-merge($config, $overrides));

    // extract the color we'll need for the icon
    $icon-color: flat-get($button, color);
    $icon-url: inline-svg(
        $arrow-svg,
        (
            currentColor: $icon-color,
        )
    );

    // dropdown css (button + overrides)
    $dropdown: (
        padding-right: 2.5em,
        background-image: $icon-url,
        background-position: calc(100% - 1em) center,
        background-repeat: no-repeat,
    );

    // merge all the css
    @return flat-merge($button, $dropdown, $overrides);
}

// ----------------------------------------------------------------------------
// textbox
// ----------------------------------------------------------------------------

@function -textbox-base() {
    @return (
        display: inline-flex,
        border-radius: get('controls:border-radius'),
        min-width: get('controls:min-width'),
        min-height: get('controls:min-height'),
        font-weight: get('controls:font-weight'),
        font-family: get('controls:font-family'),
        border: none,
        background-color: rgba(gray(6), 0.33),
        color: clr('page-fg'),
        padding: 0 0.5em,
        disabled: (
            cursor: not-allowed,
        )
    );
}
///
/// @todo Robby: examples, etc.
@mixin textbox($overrides: ()) {
    // textbox base css
    $textbox: -textbox-base();

    // config
    $config: get('controls:textbox', null, false);

    // merge all the css
    $css: flat-merge(-control-base(), $textbox, $config, $overrides);

    // // add placeholder styles
    // $placeholder: flat-get($css, '-px-placeholder');
    // @if ($placeholder) {
    //     @include placeholder {
    //         color: $placeholder;
    //     }
    // }

    // output the css
    @include css-map($css, $map-states: (hover active disabled));

    // add focus selector
    @include -focus('shadow');
}

// ----------------------------------------------------------------------------
// scrollbar
// ----------------------------------------------------------------------------

/// Customize the appearance of a scrollbar. Good support in modern webkit and chromium based
/// browsers. Has the effect of making scrollbars always visible even if the operating system would
/// normally hide them. There is no way to make the track full transparent. Set $nested to false if
/// apply to all scrollbars (this will remove the parent join).
///
/// @param {*} $size The overall width of the scrollbar
///
/// @param {*} $color The color of the scrollbar thumb (and background is derived from this if not
/// provided)
///
/// @param {*} $radius [0] The border radius of the scrollbar thumb
///
/// @param {*} $background [null] The color of the scrollbar track area (defaults to $color mixed
/// with 50% white if not provided)
///
/// @param {*} $padding [null] Padding around the scrollbar thumb (created artificially with a hack
/// since this isn't supported by the css)
///
/// @param {true} $nested [null] Set to false if this is using outside of a parent selector (to
/// apply to all scrollbars).
///
/// @example @include scrollbar(100%, blue)

@mixin scrollbar($size, $color, $radius: null, $background: null, $padding: null, $nested: true) {
    $background: if-null($background, mix($color, white));

    #{if($nested, unquote('&::'),unquote('::'))}-webkit-scrollbar {
        width: $size;
        height: $size;
    }

    #{if($nested, unquote('&::'),unquote('::'))}-webkit-scrollbar-thumb {
        border-radius: $radius;

        // if $padding is defined, we use a shadow to create the background and
        // a transparent border to create the padding
        @if ($padding) {
            box-shadow: inset 0 0 $size $size $color;
            border: solid $padding transparent;
        } @else {
            background: $color;
        }
    }

    #{if($nested, unquote('&::'),unquote('::'))}-webkit-scrollbar-track {
        background: $background;
    }
}

// ----------------------------------------------------------------------------
// tooltip
// ----------------------------------------------------------------------------

@mixin tooltip(
    $content-attr,
    $overrides: (),
    $show-delay: 1000ms,
    $hide-delay: 100ms,
    $pseudo: after
) {
    &:#{$pseudo} {
        $tooltip: (
            background: accent(-7),
            color: contrast-color(accent(-7)),
            font-size: 11px,
            padding: 0.33em 0.66em,
            border-radius: 3px,
            line-height: 1.1,
            box-shadow: 0 1px 4px rgba(black, 0.1),
        );

        content: attr($content-attr);
        display: block;
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translate(-50%, 4px);
        visibility: hidden;
        opacity: 0;

        @include css-map($tooltip);

        @include transition(visibility opacity transform, $dur: 200ms, $delay: $hide-delay);
    }

    &:hover:#{$pseudo} {
        visibility: visible;
        opacity: 1;
        transform: translate(-50%, -4px);
        transition-delay: $show-delay;
    }
}
