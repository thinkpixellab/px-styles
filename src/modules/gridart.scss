@use '../utils' as *;

/// Mixes definitions for grid columns, rows and areas into a single visual syntax that is easy to
/// understand and visualize. The first row represents column size and the last column represents
/// row sizing.
///
/// @param {*} $grid - The grid definition (see exampl)
///
/// @example
///   @include grid-art(( 'minmax(250px, 20vw) | auto    |      ', 'header              | header  |
///       auto ', 'sidebar             | main    | 1fr  ', 'footer              | footer  | auto '
///   ));

@mixin grid-art($grid, $area-names: true, $area-classes: false, $prefix: '.') {
    display: grid;
    grid-template-columns: -grid-art-cols($grid);
    grid-template-rows: -grid-art-rows($grid);

    @if ($area-names) {
        grid-template-areas: grid-art-areas($grid);
    }

    @if ($area-classes) {
        $names: grid-art-area-names($grid);

        @each $area in $names {
            #{$prefix}#{$area} {
                @if ($area-names) {
                    grid-area: $area;
                } @else {
                    grid-area: grid-art-lines($grid, $area);
                }
            }
        }
    }
}

@mixin grid-bem($grid, $prefix: '&__') {
    @include grid-art($grid, $area-names: true, $area-classes: true, $prefix: $prefix);
}

@mixin grid($args...) {
    @include grid-art($args);
}

@function -grid-art-prep($grid) {
    // remove white space and separators
    $strings: ();

    @each $str in $grid {
        $str: str-replace($str, '#', 'minmax');

        $list: str-split($str, '|');
        $list: list-map($list, get-function(trim));
        $strings: append($strings, trim(list-join($list, '|')));
    }

    @return $strings;
}

@function -grid-art-cols($grid) {
    // prepare the grid
    $grid: -grid-art-prep($grid);

    // cols is just the first row in the grid
    @return str-split(unquote(nth($grid, 1)), '|');
}

@function -grid-art-rows($grid) {
    // prepare the grid
    $grid: -grid-art-prep($grid);

    // skip the first row
    $grid: list-remove($grid, 1);

    $row-def: ();

    // extract the last item in every row and add it to row defs
    @each $str in $grid {
        $row: str-split($str, '|');
        $row-def: append($row-def, nth($row, length($row)));
    }

    @return unquote(list-join($row-def, ' '));
}

@function grid-art-area-names($grid) {
    $areas: str-split(list-join(grid-art-areas($grid, '|'), '|'), '|');
    $unique-areas: ();
    @each $area in $areas {
        @if (not list-contains($unique-areas, $area)) {
            @if ($area != '.') {
                $unique-areas: append($unique-areas, $area);
            }
        }
    }
    @return $unique-areas;
}

@function grid-art-areas($grid, $join: ' ') {
    // prepare the grid
    $grid: -grid-art-prep($grid);

    // skip the first row (col defs)
    $grid: list-remove($grid, 1);
    $areas: ();

    @each $str in $grid {
        // remove the last item
        $row: str-split($str, '|');
        $row: list-remove($row, length($row));
        $areas: append($areas, list-join($row, $join));
    }

    @return $areas;
}

/// Convert a named grid area to the grid-line syntax (e.g. 2 / 1 / 2 / 4).
///
/// @param {*} $grid A variable that represents the grid-art format of the grid.
/// @param {*} $area-name The name of the area that should be converted to lines
/// @param {*} $separator [' / '] The separator that should be used between the lines (use false or null to get a list back)

@function grid-art-lines($grid, $area-name, $separator: ' / ') {
    $start-row: null;
    $start-col: null;
    $end-row: null;
    $end-col: null;
    $r: 0;
    $c: 0;

    $areas: grid-art-areas($grid, '|');

    @each $row in $areas {
        $r: $r + 1;
        $c: 0;
        @each $name in str-split($row, '|') {
            $c: $c + 1;
            @if ($name == $area-name) {
                @if ($start-row == null) {
                    $start-col: $c;
                    $start-row: $r;
                }
                $end-col: $c;
                $end-row: $r;
            }
        }
    }

    $lines: ($start-row $start-col $end-row $end-col);

    @if ($separator) {
        @return unquote(list-join($lines, $separator));
    } @else {
        @return $lines;
    }
}

@function grid-art-spans($grid, $area-name, $separator: ' / ') {
    $start-row: null;
    $start-col: null;
    $end-row: null;
    $end-col: null;
    $r: 0;
    $c: 0;

    $areas: grid-art-areas($grid, '|');

    @each $row in $areas {
        $r: $r + 1;
        $c: 0;
        @each $name in str-split($row, '|') {
            $c: $c + 1;
            @if ($name == $area-name) {
                @if ($start-row == null) {
                    $start-col: $c;
                    $start-row: $r;
                }
                $end-col: $c;
                $end-row: $r;
            }
        }
    }

    $lines: ($start-row $start-col $end-row $end-col);

    @if ($separator) {
        @return unquote(list-join($lines, $separator));
    } @else {
        @return $lines;
    }
}
