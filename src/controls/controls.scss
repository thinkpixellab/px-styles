////
/// @group modules.controls
////

@use '../utils' as *;
@use '../site' as *;
@use 'helpers.scss' as *;

// Implementation notes:
//
// Some general control style implementation notes:
//
// - For most controls, we use css-map to generate the style. This means that we are, for the most
//   part, keeping the css in a map until we finalize it and then we use css-map($css) to actually
//   generate the style. This prevents duplicate properties and lets us keep the css fluid as we
//   merge in defaults and overrides, etc.
//
// - We're not using @extend much, primarily because the expectation is that in many cases these
//   control styles are generated from within component files with relatively narrow scope, where
//   @extend won't provide much advantage.
//
// - Generally moving away from css only themed controls and relying on components that allow us to
//   also inlcude specific markup and code. Because of that, I'm not include styles for things like
//   checkbox, radio, etc. since those all relied on specific markup and very opinionated css.

// ----------------------------------------------------------------------------
// scrollbar
// ----------------------------------------------------------------------------

/// Customize the appearance of a scrollbar. Good support in modern webkit and chromium based
/// browsers. Has the effect of making scrollbars always visible even if the operating system would
/// normally hide them. There is no way to make the track full transparent. Set $nested to false if
/// apply to all scrollbars (this will remove the parent join).
///
/// @param {*} $size The overall width of the scrollbar
///
/// @param {*} $color The color of the scrollbar thumb (and background is derived from this if not
/// provided)
///
/// @param {*} $radius [0] The border radius of the scrollbar thumb
///
/// @param {*} $background [null] The color of the scrollbar track area (defaults to $color mixed
/// with 50% white if not provided)
///
/// @param {*} $padding [null] Padding around the scrollbar thumb (created artificially with a hack
/// since this isn't supported by the css)
///
/// @param {true} $nested [null] Set to false if this is using outside of a parent selector (to
/// apply to all scrollbars).
///
/// @example @include scrollbar(100%, blue)

@mixin scrollbar($size, $color, $radius: null, $background: null, $padding: null, $nested: true) {
    $background: if-null($background, mix($color, white));

    #{if($nested, unquote('&::'),unquote('::'))}-webkit-scrollbar {
        width: $size;
        height: $size;
    }

    #{if($nested, unquote('&::'),unquote('::'))}-webkit-scrollbar-thumb {
        border-radius: $radius;

        // if $padding is defined, we use a shadow to create the background and
        // a transparent border to create the padding
        @if ($padding) {
            box-shadow: inset 0 0 $size $size $color;
            border: solid $padding transparent;
        } @else {
            background: $color;
        }
    }

    #{if($nested, unquote('&::'),unquote('::'))}-webkit-scrollbar-track {
        background: $background;
    }
}

@mixin invisible-scrollbar() {
    @include scrollbar(0px, rgba(white, 0), 0, rgba(white, 0), 0);
    -webkit-overflow-scrolling: touch;
    &::-webkit-scrollbar {
        display: none;
    }
}

// ----------------------------------------------------------------------------
// tooltip
// ----------------------------------------------------------------------------

@mixin tooltip(
    $content-attr,
    $overrides: (),
    $show-delay: 1000ms,
    $hide-delay: 100ms,
    $pseudo: after
) {
    &:#{$pseudo} {
        $tooltip: (
            background: accent(-7),
            color: contrast-color(accent(-7)),
            font-size: 11px,
            padding: 0.33em 0.66em,
            border-radius: 3px,
            line-height: 1.1,
            box-shadow: 0 1px 4px rgba(black, 0.1),
        );

        content: attr($content-attr);
        display: block;
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translate(-50%, 4px);
        visibility: hidden;
        opacity: 0;

        @include css-map-dpr($tooltip);

        @include transition(visibility opacity transform, $dur: 200ms, $delay: $hide-delay);
    }

    &:hover:#{$pseudo} {
        visibility: visible;
        opacity: 1;
        transform: translate(-50%, -4px);
        transition-delay: $show-delay;
    }
}

// ----------------------------------------------------------------------------
// toggle switch
// ----------------------------------------------------------------------------

@function toggle-switch($overrides: ()) {
    // get defaults from global config
    $config: get('controls.toggle-switch', null, false);

    $toggle-switch: (
        display: inline-flex,
        align-items: center,
        padding: 0,
        line-height: 1,
        cursor: pointer,
        user-select: none,
        background-color: transparent,
        gap: 0.25em,
        --track: (
            display: flex,
            align-items: center,
            box-sizing: border-box,
            width: 1.9em,
            height: 1em,
            padding: 3px,
            border-radius: 1em,
            font-size: 1.25em,
            background-color: rgba(gray(-8), 0.33),
            box-shadow: inset 0 1px 1px 0 rgba(0, 0, 0, 0.2),
            transition: transition(background-color),
        ),
        --thumb: (
            font-size: inherit,
            width: calc(1em - 6px),
            height: calc(1em - 6px),
            background-color: white,
            border-radius: 1em,
            box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.4),
            flex: none,
        ),
        --spacer: (
            flex: 0,
            width: 0,
            transition: transition(flex),
        ),
        disabled: (
            cursor: not-allowed,
            --track: (
                opacity: 0.66,
            ),
            --thumb: (
                opacity: gray(9),
                box-shadow: none,
            ),
        ),
        checked: (
            --track: (
                background-color: accent(),
            ),
            --spacer: (
                flex: 1,
            ),
        ),
    );

    // merge and return all the css
    @return flat-merge(control-reset(), $toggle-switch, $config, $overrides);
}

@mixin toggle-switch(
    $overrides: (),
    $track-selector: null,
    $thumb-selector: null,
    $spacer-selector: null,
    $toggle-block: null
) {
    $block: if-null($toggle-block, get-block-name(&));
    $track-selector: if-null($track-selector, '.#{$block}__track');
    $thumb-selector: if-null($thumb-selector, '.#{$block}__thumb');
    $spacer-selector: if-null($spacer-selector, '.#{$block}__spacer');

    $css: toggle-switch($overrides);

    // default (remove map states, we'll handle them after)
    @include css-map(
        $css,
        $aliases: (
            '--track': $track-selector,
            '--thumb': $thumb-selector,
            '--spacer': $spacer-selector
        )
    );
}

// ----------------------------------------------------------------------------
// popup
// ----------------------------------------------------------------------------

@function popup($overrides: ()) {
    // defaults
    $popup: (
        background-color: color(page-bg),
        border-radius: get('controls.border-radius'),
        box-shadow: shadow(15),
    );

    // global config
    $config: get('controls.popup', null);

    // merge and return all the css
    @return flat-merge($popup, $config, $overrides);
}
