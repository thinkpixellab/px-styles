////
/// @group site.variables
////

@use '../utils' as *;

///
/// @param {*} $vars A map containing value pairs which will be output as css variables. Any color
/// variable that ends with -hsla will will also get h/s/l/a component variables.
///
/// @param {*} $prefix An optional prefix to add the variables that are output.

@mixin css-vars($vars, $prefix: '') {
    @each $name, $value in $vars {
        // convert vars that end with '-hsla' to individual hsla variables
        @if (is-color($value) and ends-with($name, '-hsla')) {
            $name: str-replace($name, '-hsla');
            $hsla-name: --#{$prefix}-#{'' + $name};
            #{$hsla-name}-h: #{hue($value)};
            #{$hsla-name}-s: #{saturation($value)};
            #{$hsla-name}-l: #{lightness($value)};
            #{$hsla-name}-a: #{alpha($value)};
            #{$hsla-name}-hsla: hsla(
                var(#{$hsla-name}-h),
                var(#{$hsla-name}-s),
                var(#{$hsla-name}-l),
                var(#{$hsla-name}-a)
            );
        }

        // output the variable
        --#{$prefix}-#{"" + $name}: #{$value};
    }
}

@mixin site-vars() {
    $vars: get('variables', (), false);
    $prefix: get('variables-prefix', 'site', false);
    :root {
        @include css-vars($vars, $prefix);
    }
}

@function site-var($name) {
    $vars: get('variables', (), false);
    $prefix: get('variables-prefix', 'site', false);

    @if (map-has-key($vars, $name)) {
        $varname: --#{$prefix}-#{'' + $name};
        @return var(#{$varname});
    } @else {
        @debug #{'The site variable' $name 'has not been defined.'};
        @return '';
    }
}

@mixin hsl-vars($name, $color, $alpha: 1) {
    #{'--' + $name}: $color;
    #{'--' + $name + '-h'}: #{round-d(hue($color), 3)};
    #{'--' + $name + '-s'}: #{round-d(saturation($color), 3)};
    #{'--' + $name + '-l'}: #{round-d(lightness($color), 3)};
}

@function calc-add($a, $b) {
    @if ($b > 0) {
        @return calc(#{$a} + #{$b});
    }
    @return calc(#{$a} - #{$b * -1});
}

@function hsl-var(
    $name,
    $alpha: null,

    $h: null,
    $s: null,
    $l: null,

    $h-adj: null,
    $s-adj: null,
    $l-adj: null
) {
    @if ($h or $s or $l or $h-adj or $s-adj or $l-adj or $alpha) {
        $h: if-null($h, var(--#{$name}-h));
        $s: if-null($s, var(--#{$name}-s));
        $l: if-null($l, var(--#{$name}-l));

        @if ($h-adj) {
            $h: calc-add(#{$h}, $h-adj);
        }

        @if ($s-adj) {
            $s: calc-add(#{$s}, $s-adj);
        }

        @if ($l-adj) {
            $l: calc-add(#{$l}, $l-adj);
        }

        //     @return hsla(#{$h}, #{$s}, #{$l}, $alpha);
        // }

        @if ($alpha) {
            @return hsla(#{$h}, #{$s}, #{$l}, $alpha);
        }

        @return hsl(#{$h}, #{$s}, #{$l});
    }

    @return var(--#{$name});
}

@function hsl-var-lighten($name, $l-adj) {
    @return hsl-var($name, $l-adj: $l-adj);
}
