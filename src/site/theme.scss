////
/// @group site.theme
////

@use '../utils' as *;

/// Outputs the css variables associated with a theme.
/// @param {*} $theme
///
/// @param {*} $variant
///
/// @example Here's a pretty comprehensive demo of the whole system...
///
///    // prettier-ignore
///    @include config(
///        'themes:mytheme',
///        (
///            // customize the prefix used (otherwise theme name)
///            prefix: theme,
///
///            // whether to generate rgb number values fro colors that can be used for alpha vars
///            rgb: true,
///
///            // specificy shades that get generated for color values
///            shades: (
///                lighter: 10%,
///                darker: -10%,
///            ),
///
///            vars: (
///                // basic color
///                basic-color: (
///                    base: white,
///                    dark: black,
///                ),
///
///                // basic non-color (no shades or rgb generated)
///                non-color: (
///                    base: linear-gradient(gold, red),
///                ),
///
///                // only defined for the base (dark will get the base value)
///                base-only: (
///                    base: white,
///                ),
///
///                // customize the lighter and darker shades for the dark variant (generated for base)
///                custom-shade: (
///                    base: teal,
///                    dark: (
///                        base: cyan,
///                        lighter: white,
///                        darker: black
///                    )
///                )
///            ),
///        )
///    );
///
///    // set the default theme so we don't need to specify when using theme-var
///    @include config('theme-default', mytheme);
///
///    /* output the theme variables */
///    body {
///        @include theme-vars(mytheme);
///    }
///
///    .dark {
///        @include theme-vars(mytheme, dark);
///    }
///
///    /* use the theme variables */
///
///    .myclass {
///        // common usage: no theme specified so it uses the default
///        background-color: theme-var(custom-shade);
///
///        // get an alpha version of the color
///        background-color: theme-var(custom-shade, $alpha: 0.5);
///
///        // if we want a specific theme, need to ask for it
///        background-color: theme-var(custom-shade, $theme: other-theme);
///    }

@mixin theme-vars($theme, $variant: base) {
    // insert a comment with the variant name
    /* #{$theme}-#{$variant} */

    // get the theme from config
    $options: get('themes.' + $theme);

    // prefix to use for generated vars in this theme (allows multiple themes to share names)
    $prefix: map-get-default($options, prefix, $theme);

    // whether to generate rgb for color values which will allow for dynamic alpha in colors
    $rgb: map-get-default($options, rgb, true);

    // a map of color shades that will be generated for color values
    $shades: map-get-default($options, shades, ());

    // map of variables to generate
    $vars: map-get($options, vars);

    @each $name, $value in $vars {
        // get the base value (this is our fallback if the variant is defined)
        $base-value: map-get($value, 'base');

        // get the value for the requested variant
        $variant-value: map-get-default($value, $variant, $base-value);

        // check to see if the value is a map with shades and if it is use the entry for 'default'
        $value: $variant-value;
        @if (is-map($value)) {
            $value: map-get($value, 'base');
        }

        // output the variable
        --#{$prefix}-#{"" + $name}: #{$value};

        @if is-color($value) {
            // create the rgb values version of the var that can be used for generating alpha versions
            --#{$prefix}-#{"" + $name}-rgb: #{red($value)}, #{green($value)}, #{blue($value)};

            // create the shades version of the var
            @if ($rgb) {
                @each $shade-name, $shade in $shades {
                    $shade-value: adjust-color($value, $lightness: $shade);

                    @if (is-map($variant-value) and map-has-key($variant-value, $shade-name)) {
                        $shade-value: map-get($variant-value, $shade-name);
                    }

                    // only render if we have a value
                    @if ($shade-value) {
                        --#{$prefix}-#{"" + $name}-#{$shade-name}: #{$shade-value};
                    }
                }
            }
        }
    }
}

/// Outputs the syntax for a css variable value and does a couple of useful things in the process:
///
/// 1) it will lookup the name of the variable and make sure that it has been defined in the base
///    theme's config,
/// 2) If the var is a color you can inlcude a value for alpha and it will
///    generate the syntax for producing an alpha version of that variable.
///
/// @param {*} $themeOrPrefix The name of the theme (typically you create a base theme using a name
/// (e.g. fluent) and then themes in the same family (e.g. fluent-dark) have the same prefix. This
/// is needed only for lookup and it only checks in the base theme.
///
/// @param {*} $name The name of the variable
///
/// @param {*} $alpha [false] An alpha value that can be appled to colors.

@function theme-var($name, $alpha: false, $theme-name: null) {
    $theme: -get-theme($theme-name);
    $valid: -is-valid-theme-var($name, $theme-name);
    $prefix: map-get-default($theme, prefix, false);

    @if (not $valid) {
        @debug #{'The theme variable' $name 'has not been defined.'};
    }

    @if ($alpha) {
        $alpha-name: #{$name}-rgb;
        @return rgba(var(--#{$prefix}-#{$name}-rgb), $alpha);
    }

    @return var(--#{$prefix}-#{$name});
}

// Utils

@function -get-theme($name: null) {
    $name: if-null($name, get('theme-default', null, false));

    // if theme isn't specified, use the first theme
    @if (not $name) {
        $name: nth(nth(get('themes'), 1), 1);
    }

    @return get('themes.' + $name);
}

@function -is-valid-theme-var($name, $theme-name: null) {
    $valid-vars: -valid-theme-vars($theme-name);
    @return list-contains($valid-vars, $name);
}

@function -valid-theme-vars($theme) {
    $theme: -get-theme($theme);
    $shades: map-get-default($theme, shades, ());
    $var-names: ();
    @each $name, $val in map-get($theme, 'vars') {
        $var-names: append($var-names, $name);
        @each $shade, $shade-val in $shades {
            $var-names: append($var-names, $name + '-' + $shade);
        }
    }
    @return $var-names;
}
