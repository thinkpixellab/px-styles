////
/// @group site.misc
////

@use '../utils' as *;

/// Adds a site-specific focus selector use the value defined by `focus:selector`
///
/// @example
/// .item { @include focus() {...} }  => .item:focus-visible {...}

@mixin focus() {
    &#{get('focus:selector')} {
        @content;
    }
}

/// Shortcut for checked state (and a reminder to use aria to manage this)
///
/// @example
/// .item { @include aria-checked() {...} }  => .item:[aria-checked] {...}

@mixin aria-checked() {
    &[aria-checked] {
        @content;
    }
}

/// Shortcut for checked state (and a reminder to use aria to manage this)
///
/// @example
/// .item { @include disabled() {...} }  =>
/// .item:disabled, .item:disabled:hover, .item:disabled:active, .item:disabled[aria-checked] {...}

@mixin disabled() {
    &:disabled,
    &:disabled:hover,
    &:disabled:active,
    &:disabled[aria-checked] {
        @content;
    }
}

/// Creates a css clamp value that scales in vw units from $min to $max. The vw value is calculated
/// such that it will have the $max value when the screen is $at-width wide.
///
/// @example
/// font-size: scale-vw(18px, 36px, 1200px) => font-size: clamp(18px, 3vw, 36px)

@function scale-vw($min, $max, $at-width: null) {
    @if (not is-length($at-width)) {
        $at-width: if-null($at-width, get('container:width'));
    }

    @return clamp(#{$min}, #{divide($max, $at-width) * 100vw}, #{$max});
}

/// Creates a css clamp value that scales in vh units from $min to $max. The vh value is calculated
/// such that it will have the $max value when the screen is $at-height height.
///
/// @example
/// font-size: scale-vw(18px, 36px, 1200px) => font-size: clamp(18px, 3vh, 36px)

@function scale-vh($min, $max, $at-width) {
    @return clamp(#{$min}, #{divide($max, $at-width) * 100vh}, #{$max});
}

/// Gets a z-index value from preconfigured options.
///
/// @example
/// font-size: scale-vw(18px, 36px, 1200px) => font-size: clamp(18px, 3vh, 36px)

@function z($layerName, $offset: 0) {
    $z: get('z:' + $layerName, 0, false);
    @return $z + $offset;
}
