////
/// @group site.shadows
////

@use 'sass:math';
@use '../utils' as *;

/// Creates the syntax for a multi-level shadow
/// @param {*} $depth
/// @param {*} $level
/// @param {*} $color
/// @example depth-shadow(2, 0.5, purple) // => shadow: 0 1px 2px -0.5px rgba(128, 0, 128, 0.2295), 0 3.5px 4px 0px rgba(128, 0, 128, 0.03425), 0 1px 5px 1px rgba(128, 0, 128, 0.072)
@function depth-shadow($depth, $level, $color) {
    $depth: math.div($depth, get('shadows:levels'));
    $ease: false;
    $round: 2;

    $umbra-opacity: intp($depth, get('shadows:umbra:opacity'));
    $penumbra-opacity: intp($depth, get('shadows:penumbra:opacity'));
    $ambient-opacity: intp($depth, get('shadows:ambient:opacity'));

    // level adjustments
    /// @todo Robby, we are getting an error for line 41
    @if ($level) {
        @if ($level > 0) {
            $umbra-opacity: $umbra-opacity + ((0.6 - $umbra-opacity) * math.div($level, 10));
            $penumbra-opacity: $penumbra-opacity +
                ((0.4 - $penumbra-opacity) * math.div($level, 10));
            $ambient-opacity: $ambient-opacity + ((0.3 - $ambient-opacity) * math.div($level, 10));
        }
        @if ($level < 0) {
            $umbra-opacity: $umbra-opacity + ($umbra-opacity * math.div($level, 10));
            $penumbra-opacity: $penumbra-opacity + ($penumbra-opacity * math.div($level, 10));
            $ambient-opacity: $ambient-opacity + ($ambient-opacity * math.div($level, 10));
        }
    }

    $umbra: 0 intp($depth, get('shadows:umbra:y'), $ease, $round)
        intp($depth, get('shadows:umbra:blur'), $ease, $round)
        intp($depth, get('shadows:umbra:spread'), $ease, $round) rgba($color, $umbra-opacity);

    $penumbra: 0 intp($depth, get('shadows:penumbra:y'), $ease, $round)
        intp($depth, get('shadows:penumbra:blur'), $ease, $round)
        intp($depth, get('shadows:penumbra:spread'), $ease, $round) rgba($color, $penumbra-opacity);

    $ambient: 0 intp($depth, get('shadows:ambient:y'), $ease, $round)
        intp($depth, get('shadows:ambient:blur'), $ease, $round)
        intp($depth, get('shadows:ambient:spread'), $ease, $round) rgba($color, $ambient-opacity);

    @return (#{$umbra}, #{$penumbra}, #{$ambient});
}

/// Returns a standardized box shadow
///
/// @example shadow(2) // => 0 1px 2px -0.5px rgba(0, 0, 0, 0.21), 0 3.5px 4px 0px rgba(0, 0, 0, 0.015), 0 1px 5px 1px rgba(0, 0, 0, 0.06);

@function shadow($depth, $alpha: 0.15) {
    $blur: $depth;
    $y: $depth * get('shadows:ratio');
    $y: pow($y, get('shadows:growth'));
    @return 0 #{$y}px #{$blur}px rgba(get('shadows:color'), $alpha);
}

/// Create a standard box-shadow
///
/// @example shadow(2, black) // => box-shadow: 0 1px 2px -0.5px rgba(0, 0, 0, 0.21), 0 3.5px 4px 0px rgba(0, 0, 0, 0.015), 0 1px 5px 1px rgba(0, 0, 0, 0.06);

@mixin shadow($depth: 5, $color: null) {
    box-shadow: shadow($depth);
}

/// Create a standard drop-shadow as a css filter effect (creates
/// non-rectangular shadows on any content)
///
/// @example shadow-effect(2, gray) // => filter: drop-shadow(0 1px 2px -0.5px rgba(0, 0, 0, 0.21), 0 3.5px 4px 0px rgba(0, 0, 0, 0.015), 0 1px 5px 1px rgba(0, 0, 0, 0.06));

@mixin shadow-effect($depth: null, $color: null) {
    filter: drop-shadow(shadow($depth));
}
