////
/// @group modules.typography
////

@use '../utils' as *;
@use 'type-size' as *;
@use 'config' as *;

$-type-styles: get('typography.type-styles') !default;

@function type-style($name, $base-prop: '__base', $type-styles: $-type-styles) {
    $style: map-get($type-styles, $name);

    @if (not $style) {
        @error '[type-style] Could not find a style named #{$name} in the type-styles.';
        @return null;
    }

    $base-name: map-get($style, $base-prop);
    $base: if($base-name, type-style($base-name), null);

    @if ($style and $base) {
        @return map-merge($base, $style);
    }

    @if ($base) {
        @return $base;
    }

    @if ($style) {
        @return $style;
    }

    @return null;
}

@mixin type-style($name, $base-prop: '__base', $type-styles: $-type-styles) {
    @include css-map(type-style($name, $base-prop, $type-styles), $ignore: '__');
}

@mixin type-styles($type-styles, $base-prop: '__base', $selector-prop: '__selector') {
    @each $name, $props in $type-styles {
        $selector: $name;

        @if (map-has-key($props, $selector-prop)) {
            $selector: map-get($props, $selector-prop);
        }

        #{$selector} {
            @include type-style($name, $type-styles: $type-styles);
        }
    }
}
