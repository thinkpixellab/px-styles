////
/// @group site.config
////

@use 'strings.scss' as *;
@use 'collections.scss' as *;

/// A global map that contains all config settings.
$config: ();

/// Retrieve a configuration setting.
///
/// @param {string or list} $paths The path (string) list of paths (list) where
/// the setting should be found. Each path is one or more keys separated by
/// colons (e.g. 'colors:accent' would find the value accent in the colors map).
/// If a list of strings is provided, they will searched in order and the first
/// non-null value will be returned.
///
/// @param {*} $fallback [null] The value to return if the path doesn't exist.

@function get($paths, $fallback: null) {
    // $paths is a list
    @if (type-of($paths) == 'list') {
        @each $path in $paths {
            $result: get($path, null);
            @if ($result != null) {
                @return $result;
            }
        }
        @return $fallback;
    }

    @return map-get-path($config, $paths, $fallback);
}

/// Add a configuration setting.
///
/// @param {*} $path The path of the setting with keys separated by colons (e.g.
/// 'colors:accent' would set the value accent in the colors map). If necessary,
/// new maps will be created along the way.
///
/// @param {*} $val [null] The value to be added.

@mixin config($path, $val: null) {
    $config: map-set-path($config, $path, $val) !global;
}
