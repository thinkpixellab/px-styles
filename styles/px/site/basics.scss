////
/// @group site.basics
////

// ----------------------------------------------------------------------
// Dependencies
// ----------------------------------------------------------------------

@use '../utils/all.scss' as *;
@use 'color.scss' as *;
@use 'spacing.scss' as *;
@use 'mediaquery.scss' as *;
@use 'typography.scss' as *;

// prettier-ignore
@mixin site-basics(

    // map of font faces to load, examples"
    // (
    //     circular: ( (src: '../assets/fonts/circular/circular-regular', weight: 400, ext: woff2) ),
    //     archivo: ( ( googleFont: true, weight: 400, style: italic ) )
    // )
    $fonts: null,

    // whether to enable font-smoothing
    $font-smoothing: true,

    // whether to reset links (anchors)
    $link-reset: true,

    // a selector which will provide normal link-like style
    $link-selector: '.link',

    // whether to reset buttons
    $button-reset: true,

    // a selector which will produce a standardized button-like button (TODO)
    $button-selector: '.button',

    // whether to reset paragraphs
    $p-reset: true,

    // a selector that will restore typopgraphic features for paragraphs (TODO)
    $p-selector: '.reading p',

    // whether to list (ul, ol, li)
    $list-reset: true,

    // a selector which will restore unordered list typographic style (TODO)
    $unordered-list-selector: 'ul.list, .reading ol',

    // a selector which will restore ordered list typographic style (TODO)
    $ordered-list-selector: 'ul.list, .reading ol',

    // a selector that, if non-null, will be used to create a standard content container with a max size and outer gutter
    $container-selector: '.container',

    // a set of headings and other type styles that will will be
    // generated, base refers to the config setting that provides any
    // non-specified properties
    // prettier-ignore
    $type-styles: (
        'h1, .h1': (font-size: fs(h1), base: 'headings'),
        'h2, .h2': (font-size: fs(h2), base: 'headings'),
        'h3, .h3': (font-size: fs(h3), base: 'headings'),
        'h4, .h4': (font-size: fs(h4), base: 'headings'),
        'h5, .h5': (font-size: fs(xl), base: 'headings'),
        '.display1': (font-size: fs(d1), base: 'headings'),
        '.display2': (font-size: fs(d2), base: 'headings'),
        '.sh1': (font-size: fs(h4), base: 'sub-headings'),
        '.sh2': (font-size: fs(xl), base: 'sub-headings'),
        '.sh3': (font-size: fs(md), base: 'sub-headings'),
    )

) {
    @if ($fonts) {
        // local fonts
        @each $font-name, $variants in $fonts {
            @each $options in $variants {
                @if (map-has-key($options, src)) {
                    $src: map-get($options, src);
                    $weight: map-get-default($options, 'weight', null);
                    $style: map-get-default($options, style, null);
                    $exts: map-get-default($options, exts, woff ttf);
                    @include font-face($font-name, $src, $weight, $style, $exts);
                }
            }
        }

        // google fonts
        @each $font-name, $variants in $fonts {
            @each $options in $variants {
                @if (map-has-key($options, googleFont) and map-get($options, googleFont)) {
                    $weight: map-get-default($options, 'weight', '400');
                    $style: map-get-default($options, style, 'normal');
                    @include google-font($name: $font-name, $weights: $weight, $styles: $style);
                }
            }
        }
    }

    html {
        // set the root font size (must be in px, sets the basis for rems)
        font-size: get(font-size-base);

        // set the font size at the specified breakpoints
        @each $break, $font-size in get(font-size-breaks) {
            @include media-until($break) {
                font-size: $font-size;
            }
        }
    }

    // set the body font size to be 1rem
    body {
        font-size: 1rem;
    }

    // font-family, color, line-height, etc.
    html,
    body {
        font-family: get(font-family);
        font-weight: get(font-weight);
        line-height: get(line-height);

        @if ($font-smoothing) {
            @include font-smoothing-on();
        }

        background-color: clr(page-bg);
        color: clr(page-fg);
    }

    // customize the text selection color
    ::selection {
        background: get('selection-bg');
        color: get('selection-fg');
    }

    // reset links
    @if ($link-reset) {
        a,
        a:hover {
            color: inherit;
            text-decoration: inherit;
        }
    }

    // link styles
    @if ($link-selector) {
        #{$link-selector} {
            @include css-map(get(links));
            &:hover {
                @include css-map(get(links-hover));
            }
        }
    }

    // paragraph reset
    @if ($p-reset) {
        p {
            padding: 0;
            margin: 0;
            line-height: get(line-height);
        }
    }

    // button reset
    @if ($button-reset) {
        button {
            appearance: none;
            display: block;
            outline: none;
            border: none;
            border-radius: 0;
            background: none transparent;
            background-color: none;
            padding: 0;
            width: auto;
            height: auto;
            border-spacing: 0;
            text-align: left;
            text-indent: 0;
            line-height: 1;
            color: inherit;
            font-family: inherit;
            font-size: inherit;
        }
    }

    // list reset
    @if ($list-reset) {
        ul,
        ol {
            padding: 0;
            margin: 0;
            list-style: none;
            li {
                padding: 0;
                margin: 0;
            }
        }
    }

    // code, pre
    pre,
    code {
        font-family: get(code-font-family);
        font-size: get(code-font-size);
    }

    // defaults for hr
    hr {
        height: 0;
        margin: 2rem 0;
        padding: 0;
        border: none;
        border-top: 1px solid clr(page-fg);
    }

    // prevent sup from affecting line-height
    sup {
        line-height: 0.5;
    }

    // inline SVG inherits the current color (helpful for inline icons)
    .svg-icon,
    .svg-icon svg {
        path,
        circle,
        rect,
        polygon,
        ellipse {
            fill: currentColor;
        }
    }

    // create a basic content container (centered div with a max size and padding)
    @if ($container-selector) {
        #{$container-selector} {
            width: 100%;
            max-width: get(content-max-width);
            padding: 0 get(gutter);
            margin: 0 auto;
            position: relative;
        }
    }

    // create class for visually hiding content that should still be available for accessibility
    .visually-hidden {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
        clip: rect(1px, 1px, 1px, 1px);
    }

    // create type styles
    @each $selector, $props in $type-styles {
        $base-props: get(map-get-default($props, 'base', ()));
        $props: map-merge($base-props, $props);
        #{$selector} {
            @include css-map($props, $prop-ignore: base);
        }
    }

}
