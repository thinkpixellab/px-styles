////
/// This is a poster comment.
/// @group site
////

// ----------------------------------------------------------------------
// Dependencies
// ----------------------------------------------------------------------

@use 'math.scss' as *;
@use 'units.scss' as *;
@use 'mediaquery.scss' as *;
@use 'color.scss' as *;
@use 'collections.scss' as *;
@use 'typography.scss' as *;

// ----------------------------------------------------------------------
// Internal
// ----------------------------------------------------------------------

@mixin -type-styles(
    $selectors,
    $font-size,
    $font-size-bp,
    $font-family,
    $font-weight,
    $line-height,
    $letter-spacing,
    $color,
    $margin
) {
    @each $selector in $selectors {
        $index: index($selectors, $selector);

        #{$selector} {
            font-family: nth-or-val($font-family, $index, $font-family);
            font-size: nth-or-val($font-size, $index);
            font-weight: nth-or-val($font-weight, $index);
            line-height: nth-or-val($line-height, $index);
            letter-spacing: nth-or-val($letter-spacing, $index);
            color: nth-or-val($color, $index);
            margin: unquote(nth-or-val($margin, $index));

            @each $break, $sizes in $font-size-resp {
                @include media-until($break) {
                    font-size: nth-or-val($sizes, $index);
                }
            }
        }
    }
}
// ----------------------------------------------------------------------
// Mixins / Functions
// ----------------------------------------------------------------------

/// Generate the basic typography for a site. This will perform the following:
/// - Load fonts based on $font-faces
/// - Generate heading styles based on
@mixin site-basics() {
    // local font-faces

    @if ($font-faces) {
        @each $font-name, $variants in $font-faces {
            @each $options in $variants {
                @if (map-has-key($options, src)) {
                    $src: map-get($options, src);
                    $weight: map-get-default($options, 'weight', null);
                    $style: map-get-default($options, style, null);
                    $exts: map-get-default($options, exts, woff ttf);
                    @include font-face($font-name, $src, $weight, $style, $exts);
                }
            }
        }
    }

    // google fonts
    @each $font-name, $variants in $font-faces {
        @each $options in $variants {
            @if (map-has-key($options, googleFont) and map-get($options, googleFont)) {
                $weight: map-get-default($options, 'weight', '400');
                $style: map-get-default($options, style, 'normal');
                @include google-font($name: $font-name, $weights: $weight, $styles: $style);
            }
        }
    }

    html {
        // set the root font size (must be in px, sets the basis for rems)
        font-size: $base-font-size;

        // set the font size at the specified breakpoints
        @each $break, $font-size in $font-size-resp {
            @include media-until($break) {
                font-size: $font-size;
            }
        }
    }

    // set the body font size to be 1rem
    body {
        font-size: 1rem;
    }

    // font-family, color, line-height, etc.
    html,
    body {
        font-family: $font-family;
        font-weight: $font-weight;
        line-height: $line-height;

        @if ($font-smoothing) {
            @include font-smoothing-on();
        }

        color: $page-fg;
        background-color: $page-bg;
    }

    // customize the text selection color
    ::selection {
        background: $selection-bg;
        color: $selection-fg;
    }

    // generate headings and subheadings
    @include -type-styles(
        $selectors: $headings-selectors,
        $font-size: $headings-font-size,
        $font-size-bp: $headings-font-size-resp,
        $font-family: $headings-font-family,
        $font-weight: $headings-font-weight,
        $line-height: $headings-line-height,
        $letter-spacing: $headings-letter-spacing,
        $color: $headings-color,
        $margin: $headings-margin
    );

    // reset links
    @if ($link-reset) {
        a,
        a:hover {
            color: inherit;
            text-decoration: inherit;
        }
    }

    // link styles
    @if ($link-restore-selector) {
        #{$link-restore-selector} {
            // TODO: transitions
            color: map-get($links, color);
            text-decoration: map-get($links, decoration);
            text-decoration-color: map-get($links, decoration-color);
            &:hover {
                color: map-get($links, hover-color);
                text-decoration: map-get($links, hover-decoration);
                text-decoration-color: map-get($links, hover-decoration-color);
            }
        }
    }

    // paragraph reset
    @if ($p-reset) {
        p {
            padding: 0;
            margin: 0;
            line-height: $line-height;
        }
    }

    // button reset
    @if ($button-reset) {
        button {
            appearance: none;
            display: block;
            outline: none;
            border: none;
            border-radius: 0;
            background: none transparent;
            background-color: none;
            padding: 0;
            width: auto;
            height: auto;
            border-spacing: 0;
            text-align: left;
            text-indent: 0;
            line-height: 1;
            color: inherit;
            font-family: inherit;
            font-size: inherit;
        }
    }

    // list reset
    @if ($list-reset) {
        ul,
        ol {
            padding: 0;
            margin: 0;
            list-style: none;
            li {
                padding: 0;
                margin: 0;
            }
        }
    }

    // code, pre
    pre,
    code {
        font-family: $code-font-family;
        font-size: $code-font-size;
    }

    // defaults for hr
    hr {
        height: 0;
        margin: 2rem 0;
        padding: 0;
        border: none;
        border-top: 1px solid $page-fg;
    }

    // prevent sup from affecting line-height
    sup {
        line-height: 0.5;
    }

    // inline SVG inherits the current color (helpful for inline icons)
    .svg-icon,
    .svg-icon svg {
        path,
        circle,
        rect,
        polygon,
        ellipse {
            fill: currentColor;
        }
    }
}

// ----------------------------------------------------------------------
// Variables
// ----------------------------------------------------------------------

/// List of fonts that will get loaded on the site using @fontface
/// @type map (...font descriptions)
/// @group site.config
/// @prop {String} src - The url path used to load the font (do not include the extension, it will be appended)
/// @prop {Boolean} googleFont - If true, the font will be loaded as a google font instead of using the src property
/// @prop {String} weight - The weight associated with this variation of the font
/// @prop {String} style [null] - (optional) The styles associated with this variation of the font
/// @prop {String} ext [woff ttf] - (optional) The full list of extensions to be loaded (added to value of src)
/// @example
/// circular: (
///     (src: '../assets/fonts/circular/circular-regular', weight: 400, ext: woff2),
///     (src: '../assets/fonts/circular/circular-bold', weight: 700, , ext: woff2)
/// )
///
$font-faces: () !default;

/// Default font family
/// @group site.config
$font-family: sans-serif !default;

/// Default font family for headings
/// @group site.config
$heading-font-family: $font-family !default;

/// Default font larger display headings
/// @group site.config
$display-font-family: $heading-font-family !default;

/// Default for monospace / code samples
/// @group site.config
$code-font-family: SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', monospace !default;

/// Default font-size for display code samples
/// @group site.config
$code-font-size: 13px;

/// Default font size, set on the root element of the page
/// @group site.config
$font-size: 15px !default;

/// When provided, the font-size set on the element root will be adjusted at the given breaks.
/// @group site.config
$font-size-resp: (
    md: 14px
) !default;

/// Default font weight
/// @group site.config
$font-weight: 400 !default;

/// Default line height
/// @group site.config
$line-height: 1.15 !default;

/// Whether font-smothing is enabled by default
/// @group site.config
$font-smoothing: false !default;

/// Text selection background color (set to null to skip)
/// @group site.config
$selection-bg: $primary !default;

/// Text selection foreground color (set to null to skip)
/// @group site.config
$selection-fg: white !default;

$headings-selectors: ('.hero1', '.hero2', 'h1, .h1', 'h2, .h2', 'h3, .h3', 'h4, .h4', 'h5, .h5') !default;

$headings-font-size: (fs('s8'), fs('s7'), fs('s6'), fs('s5'), fs('s4'), fs('lg'), fs('md')) !default;

$headings-font-size-resp: (
    md: (
        's7',
        's6',
        's5',
        's4',
        'lg',
        'md',
        'base'
    )
) !default;

$headings-font-family: null !default;

$headings-font-weight: 700 !default;

$headings-line-height: 1 !default;

$headings-letter-spacing: null !default;

$headings-color: null !default;

$headings-margin: '0 0 0.25em 0' !default;

// If true, <a> tags will be reset to look like normal text.
/// @group site.config
///
$link-reset: true !default;

/// The selector used for creating traditional link styles (esp. useful if link-reset
/// is true). Set to 'a' to normal link functionality or to false to skip altogether.
/// @group site.config
///
$link-restore-selector: '.link' !default;

/// Links configuration
/// @group site.config
///
$links: (
    color: $link-fg,
    decoration: underline,
    decoration-color: rgba($link-fg, 0.25),
    hover-color: $link-fg-hover,
    hover-decoration: underline,
    hover-decoration-color: $link-fg-hover
) !default;

$button-reset: true !default;
$button-restore-selector: '.button' !default;

$p-reset: true !default;
$p-restore-selector: '.reading p' !default;

$list-reset: true !default;
$list-restore-selector: '.list' !default;
