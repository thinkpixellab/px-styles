////
/// @group color
////

// ----------------------------------------------------------------------
// Dependencies
// ----------------------------------------------------------------------

@use 'math.scss' as *;

// ----------------------------------------------------------------------
// Internal
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// Mixins / Functions
// ----------------------------------------------------------------------

/// Get a color from a color scale defined by ranges, e.g. (5%, 10%),
///
@function color-scale($p, $hues, $sats, $tones) {
    $h: if(type-of($hues) == 'list', intp($p, $hues), $hues);
    $s: if(type-of($sats) == 'list', intp($p, $sats), $sats);
    $l: intp($p, $tones);
    $color: hsl($h, $s, $l);
    @return $color;
}

/// Derive a gray color from a globally defined gray palette
///
/// @param {number} $p The lightness/darkness of the gray (where 0...1 -> light...dark).
///
@function gray-scale($p) {
    @return color-scale($p, $gray-hues, $gray-sats, $gray-tones);
}

/// Computes the the luminance (grayscale value) of a color in the yiq color space
///
@function yiq($color) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);
    $yiq: (($r * 299) + ($g * 587) + ($b * 114))/1000;

    // 0 (black) - 255 (white)
    @return $yiq;
}

/// Choose a contrasting foreground based on a background color
@function contrast-color($bg, $light-fg: $contrast-fg-light, $dark-fg: $contrast-fg-dark) {
    @return if(yiq($bg) < $contrast-threshold, $light-fg, $dark-fg);
}

/// Generates a loud striped background gradient that can be used when debugging (especially helpful for scrolling)
///
///
/// @param {*} $color1 [yellowgreen] The first color in the gradient
/// @param {*} $color2 [gold] The second color in the gradient
///
@mixin debug-zebra($color1: yellowgreen, $color2: gold) {
    background-image: repeating-linear-gradient(-45deg, $color1 0 20px, $color2 20px 40px);
}

// ----------------------------------------------------------------------
// Variables / Config
// ----------------------------------------------------------------------

// standard colors
$red: #dc3545 !default;
$orange: #fd7e14 !default;
$yellow: #ffc107 !default;
$green: #28a745 !default;
$blue: #0d6efd !default;
$purple: #6f42c1 !default;
$teal: #20c997 !default;
$cyan: #17a2b8 !default;

// "branding" colors
$primary: $blue !default;
$secondary: scale-color($blue, $lightness: -10%) !default;

// information colors
$success: #28a745 !default;
$warning: #ffc107 !default;
$error: #dc3545 !default;

/// Global default saturation scale for the gray-scale function
/// @type number or list
/// @group config
$gray-sats: (4%, 15%) !default;

/// Global default hue scale for the gray-scale function
/// @type number or list
/// @group config
$gray-hues: hue($primary) !default;

/// Global default tone scale for the gray-scale function
/// @type number or list
/// @group config
$gray-tones: (96%, 4%) !default;

/// Global default gray-scale variable values. Update these to fine-tune the output for
/// standard variables like $gray-100, etc. Default values are greated for $gray-50, $gray-100,
/// etc. through $gray-950.
/// @type map
/// @group config
$gray-thresholds: (
    gray-050: 0.02,
    gray-100: 0.04,
    gray-150: 0.07,
    gray-200: 0.1,
    gray-250: 0.14,
    gray-300: 0.18,
    gray-350: 0.24,
    gray-400: 0.3,
    gray-450: 0.4,
    gray-500: 0.5,
    gray-550: 0.57,
    gray-600: 0.63,
    gray-650: 0.7,
    gray-700: 0.74,
    gray-750: 0.78,
    gray-800: 0.82,
    gray-850: 0.88,
    gray-900: 0.9,
    gray-950: 0.95
) !default;

/// Global default light foreground color for the contrast-color function
/// @type color
/// @group config
$contrast-fg-light: white !default;

/// Global default dark foreground color for the contrast-color function
/// @type color
/// @group config
$contrast-fg-dark: gray-scale(0.9) !default;

/// Global default threshold for determining foreground to background contrast
/// @type color
/// @group config
$contrast-threshold: 128 !default;

/// A handy debug color that can be used to quickly identify errors, etc.
/// @type color
/// @group config
$uhoh: chartreuse !default;

// grays
$black: gray-scale(map-get($gray-thresholds, gray-900));
$white: #fff;
$gray-050: gray-scale(map-get($gray-thresholds, gray-050));
$gray-100: gray-scale(map-get($gray-thresholds, gray-100));
$gray-150: gray-scale(map-get($gray-thresholds, gray-150));
$gray-200: gray-scale(map-get($gray-thresholds, gray-200));
$gray-250: gray-scale(map-get($gray-thresholds, gray-250));
$gray-300: gray-scale(map-get($gray-thresholds, gray-300));
$gray-350: gray-scale(map-get($gray-thresholds, gray-350));
$gray-400: gray-scale(map-get($gray-thresholds, gray-400));
$gray-450: gray-scale(map-get($gray-thresholds, gray-450));
$gray-500: gray-scale(map-get($gray-thresholds, gray-500));
$gray-550: gray-scale(map-get($gray-thresholds, gray-550));
$gray-600: gray-scale(map-get($gray-thresholds, gray-600));
$gray-650: gray-scale(map-get($gray-thresholds, gray-650));
$gray-700: gray-scale(map-get($gray-thresholds, gray-700));
$gray-750: gray-scale(map-get($gray-thresholds, gray-750));
$gray-800: gray-scale(map-get($gray-thresholds, gray-800));
$gray-850: gray-scale(map-get($gray-thresholds, gray-850));
$gray-900: gray-scale(map-get($gray-thresholds, gray-900));
$gray-950: gray-scale(map-get($gray-thresholds, gray-950));

// ----------------------------------------------------------------------
// Page colors

/// Default global page background
$page-bg: $white !default;

/// Default global page foreground
$page-fg: $gray-900 !default;

/// Default global link color
$link-fg: $primary !default;

/// Default global link hover color
$link-fg-hover: darken($primary, 10%) !default;
